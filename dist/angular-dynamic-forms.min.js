angular.module("dynamicForms",[]),angular.element.prototype.closestAttribute=function(t){var e=this;return e.parent()&&"body"!==e.parent()[0].nodeName.toLowerCase()?e.parent().attr(t)?e.parent().attr(t):e.parent().closestAttribute(t):void 0},angular.module("dynamicForms").service("DfSchemaService",["DfUtils","$injector",function(t,e){var n=e.has("dynamicFormDefaults")?e.get("dynamicFormDefaults"):function(t){return{"ng-focus":"columnCtrl.onInputFocus()","ng-required":!0,type:"text",id:t,name:t}};this.findSchema=function(e){return t.getDependency(e.closestAttribute("df-schema"))},this.findColumn=function(t){return t.closestAttribute("df-column")},this.extractValue=function(t,e){var n=this.findSchema(t);return _(n).where({column:this.findColumn(t)}).pluck(e).value().pop()},this.extractColumns=function(t){var t=e.get(t);return _.map(t,function(t){return{column:t.column,template:t.template}})},this.extractColumn=function(t,n){var t=e.get(t);return _.find(t,{column:n})},this.extractValidators=function(t,r){var t=e.get(t);return _.chain(t).where({column:r}).pluck("validators").map(function(t){return _.defaults(t||{},n(r))}).value().pop()},this.prependColumnValue=function(t,e){var n=this.extractValue(t,e);t.prepend(n)},this.appendColumnValue=function(t,e){var n=this.extractValue(t,e);t.append(n)}}]),angular.module("dynamicForms").service("DfUtils",["$injector",function(t){var e={forMode:{write:"df-column-write",read:"df-column-read",edit:"df-column-edit"}};this.classForState=function(t){return e.forMode[t]},this.classesForStates=function(t){return _(t).map(function(t){return e.forMode[t]}).unique().value().join(" ")},this.getDependency=function(e){return e?t.get(e):void 0}}]),angular.module("dynamicForms").run(["$templateCache",function(t){t.put("templates/default.html",'<div class="df-column" df-column="<%= column %>" df-mode="<%= mode %>">\r\n\r\n    <label df-label class="df-label"></label>\r\n\r\n    <div>\r\n        <input df-input class="df-input" />\r\n        <div class="messages">\r\n            <div df-edit class="df-edit"></div>\r\n            <div df-help class="df-help"></div>\r\n            <div df-validation class="df-validation"></div>\r\n        </div>\r\n    </div>\r\n\r\n    <div df-edit-controls class="df-edit-controls"></div>\r\n\r\n</div>'),t.put("templates/npw.html",'<div class="field-group" df-column="<%= column %>" df-mode="<%= mode %>"\r\n     ng-class="{\'field-group-tooltip--active\': columnCtrl.displayHelp(), \'field-group--error\': <%= form %>.<%= column %>.$invalid && <%= form %>.<%= column %>.$dirty}">\r\n\r\n    <div class="form-input-container">\r\n        <label class="form-label" df-label></label>\r\n        <input type="text" class="form-input" df-input>\r\n    </div>\r\n\r\n\r\n    <button type="button" class="form-tooltip-toggle" ng-click="columnCtrl.toggleHelp()">\r\n        <span>Show help information</span>\r\n    </button>\r\n\r\n    <!--Help-->\r\n    <div class="form-tooltip form-tooltip--feature-aside" df-help>\r\n    </div>\r\n\r\n    <!--Validation-->\r\n    <div class="form-error" df-validation>\r\n    </div>\r\n</div>\r\n'),t.put("directives/model/column/components/df-edit-controls.html",'<button class="df-cancel-edit" ng-click="columnCtrl.cancelEdit()">\r\n    Cancel\r\n</button>\r\n<button class="df-save-edit" ng-click="columnCtrl.saveEdit()">\r\n    Save\r\n</button>'),t.put("directives/model/column/components/df-edit.html",'<button class="df-edit-button" ng-click="columnCtrl.startEdit()" ng-if="columnCtrl.isReadonly()">\r\n    Edit\r\n</button>')}]),angular.module("dynamicForms").directive("dfModel",["$templateCache","DfSchemaService",function(t,e){return{restrict:"EA",priority:1100,compile:function(n,r){var o=e.extractColumns(r.dfSchema),i=r.dfMode,l=r.ngForm,c=t.get("templates/"+(r.dfTemplate||"default")+".html");_.each(o,function(e){n.append(t.get(e.template)||_.template(c)({form:l,column:e.column,mode:i}))})}}}]),angular.module("dynamicForms").controller("DfColumnController",["$scope","$element","$rootScope","DfUtils",function(t,e,n,r){var o={currentMode:e.closestAttribute("df-mode")||"write",element:e,input:void 0,savedValue:void 0,help:!1};this.registerInput=function(t){o.input=t,l(o.currentMode)},this.startEdit=function(){o.savedValue=o.input.val(),i("edit")},this.cancelEdit=function(){o.input.val(o.savedValue),o.input.triggerHandler("input"),i("read")},this.saveEdit=function(){o.input.controller("ngModel").$valid&&i("read")},this.onInputFocus=function(){n.$broadcast("df_input_focus",o.input.attr("id")),o.help=!0},this.toggleHelp=function(){o.help=!o.help},this.isReadonly=function(){return"read"===o.currentMode},this.displayHelp=function(){return o.help};var i=function(t){o.element.toggleClass(r.classesForStates([o.currentMode,t])),l(t),o.currentMode=t},l=function(t){o.input.attr("disabled","read"===t)};n.$on("df_input_focus",function(t){o.help=t===o.input.attr("id")})}]),angular.module("dynamicForms").directive("dfColumn",function(){return{restrict:"A",scope:!0,controller:"DfColumnController",controllerAs:"columnCtrl"}}),angular.module("dynamicForms").directive("dfEditControls",function(){return{restrict:"A",require:"^dfColumn",templateUrl:"directives/model/column/components/`df-edit-controls.html`"}}),angular.module("dynamicForms").directive("dfEdit",function(){return{restrict:"A",require:"^dfColumn",templateUrl:"directives/model/column/components/df-edit.html"}}),angular.module("dynamicForms").directive("dfHelp",["$compile","DfSchemaService",function(t,e){return{restrict:"A",link:function(t,n,r){e.appendColumnValue(n,"help")}}}]),angular.module("dynamicForms").directive("dfInput",["$compile","DfSchemaService",function(t,e){function n(t,e){if(t&&t.type&&"select"!==t.type){var n=e.attr("class"),r=angular.element('<select class="'+n+'"></select>');return e.replaceWith(r),r}return e}return{restrict:"A",priority:1050,require:"^dfColumn",compile:function(r,o){var i;r.removeAttr("df-input");var l=r.closestAttribute("df-schema"),c=r.closestAttribute("df-column"),u=r.closestAttribute("df-model-instance")||"model",a=r.closestAttribute("df-controller"),d=(r.closestAttribute("df-mode")||"write",r.closestAttribute("df-model-instance")),s=e.extractColumn(l,c);i=n(s,r);var m=e.extractValidators(l,c);return _.each(m,function(t,e){i.attr(e,_.template(t)({controller:a,model:d}))}),i.attr("ng-model",u+"."+c),{pre:function(e,n){t(n)(e)},post:function(t,e,n,o){o.registerInput(r)}}}}}]),angular.module("dynamicForms").directive("dfLabel",["$compile","DfSchemaService",function(t,e){return{restrict:"A",link:function(t,n){e.prependColumnValue(n,"label");var r=e.findColumn(n);n.attr("for",r)}}}]),angular.module("dynamicForms").directive("dfValidation",["$compile","DfSchemaService",function(t,e){return{restrict:"A",link:function(t,n,r){e.appendColumnValue(n,"validation")}}}]);